// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 8, 21, 11, 53, 3, 544378024, time.UTC),
		},
		"/config.tf": &vfsgen۰CompressedFileInfo{
			name:             "config.tf",
			modTime:          time.Date(2020, 8, 21, 11, 53, 3, 544298319, time.UTC),
			uncompressedSize: 717,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcb\x6a\xeb\x30\x10\x86\xf7\x7e\x8a\xc1\x9b\xb3\x4b\x4e\xce\xe9\x25\x5d\x74\xd3\x45\x29\x04\x4a\x21\x0f\x20\x64\x69\x1c\x4f\x2d\x4b\x46\x33\x4a\x08\xa5\x7d\xf6\xe2\x4b\x93\xd6\x38\x74\x67\xac\x6f\xbe\x7f\x2e\x7b\x1d\x49\x17\x0e\x21\x37\x2e\xb1\x60\x54\x5e\x37\x98\xc3\x5b\x06\x60\x91\x4d\xa4\x56\x28\x78\xb8\x87\x7c\xb3\x66\x18\x21\xe8\xa1\xec\x3d\xcb\xce\xf5\x11\x1d\x6a\x46\xd5\xe8\x58\x63\x9c\x37\xa4\x02\xa3\x47\x41\x86\x91\x86\x91\xee\xd9\x52\x27\x27\x1d\x67\x68\xe9\xb4\x20\xcb\x24\xa2\x48\xe4\xac\xda\x63\x64\x0a\xfe\xb7\x84\x87\x0e\x86\xe7\xd4\x14\x9d\xff\x87\x87\xb9\x52\x6d\xa4\xbd\x16\x54\x35\x1e\x67\x4d\xdb\xed\x13\xbc\x0c\x0c\x6c\xf0\x08\x25\x39\xfc\xc3\x60\x42\xd3\x3a\x14\x84\x56\x4b\x35\x69\xfb\x63\xb9\x60\xae\x96\x64\x55\x64\x3d\x89\xac\x53\x81\x26\xf8\x92\x76\xaa\xaf\x9c\x8b\x7c\x24\x37\x78\x41\x02\x1c\x22\x09\x82\x54\x08\xe7\x52\x30\xc1\x0b\x7a\x81\x32\xc4\xfe\xc9\x62\xeb\xc2\x11\xed\xd7\x5d\x26\xa1\x87\xd0\x2d\x97\x95\x09\xc9\xcb\x6c\xe4\xb0\x1e\x08\x25\x8c\x2c\x90\xef\xcd\x27\xe1\xf7\x09\x57\x93\x73\x84\x20\x2c\x51\xb7\x4a\x42\x8d\x97\x0f\xa2\x6d\x03\x27\x16\x7a\x16\x12\xa3\xed\xc7\x20\xcf\xa2\x9d\x23\xbf\x03\xed\x2d\xbc\x06\xf2\xdd\xf7\xc5\x1e\x72\x5d\x18\x8b\xe5\xe2\xef\xea\xdf\xff\xab\xeb\x9b\xdb\xf5\xdd\xf0\xa3\x1b\xfd\x33\x00\x00\xff\xff\x9a\x14\x2b\x2d\xcd\x02\x00\x00"),
		},
		"/powervs": &vfsgen۰DirInfo{
			name:    "powervs",
			modTime: time.Date(2020, 8, 31, 5, 9, 5, 705396965, time.UTC),
		},
		"/powervs/config.tf": &vfsgen۰CompressedFileInfo{
			name:             "config.tf",
			modTime:          time.Date(2020, 8, 21, 11, 53, 3, 544298319, time.UTC),
			uncompressedSize: 717,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcb\x6a\xeb\x30\x10\x86\xf7\x7e\x8a\xc1\x9b\xb3\x4b\x4e\xce\xe9\x25\x5d\x74\xd3\x45\x29\x04\x4a\x21\x0f\x20\x64\x69\x1c\x4f\x2d\x4b\x46\x33\x4a\x08\xa5\x7d\xf6\xe2\x4b\x93\xd6\x38\x74\x67\xac\x6f\xbe\x7f\x2e\x7b\x1d\x49\x17\x0e\x21\x37\x2e\xb1\x60\x54\x5e\x37\x98\xc3\x5b\x06\x60\x91\x4d\xa4\x56\x28\x78\xb8\x87\x7c\xb3\x66\x18\x21\xe8\xa1\xec\x3d\xcb\xce\xf5\x11\x1d\x6a\x46\xd5\xe8\x58\x63\x9c\x37\xa4\x02\xa3\x47\x41\x86\x91\x86\x91\xee\xd9\x52\x27\x27\x1d\x67\x68\xe9\xb4\x20\xcb\x24\xa2\x48\xe4\xac\xda\x63\x64\x0a\xfe\xb7\x84\x87\x0e\x86\xe7\xd4\x14\x9d\xff\x87\x87\xb9\x52\x6d\xa4\xbd\x16\x54\x35\x1e\x67\x4d\xdb\xed\x13\xbc\x0c\x0c\x6c\xf0\x08\x25\x39\xfc\xc3\x60\x42\xd3\x3a\x14\x84\x56\x4b\x35\x69\xfb\x63\xb9\x60\xae\x96\x64\x55\x64\x3d\x89\xac\x53\x81\x26\xf8\x92\x76\xaa\xaf\x9c\x8b\x7c\x24\x37\x78\x41\x02\x1c\x22\x09\x82\x54\x08\xe7\x52\x30\xc1\x0b\x7a\x81\x32\xc4\xfe\xc9\x62\xeb\xc2\x11\xed\xd7\x5d\x26\xa1\x87\xd0\x2d\x97\x95\x09\xc9\xcb\x6c\xe4\xb0\x1e\x08\x25\x8c\x2c\x90\xef\xcd\x27\xe1\xf7\x09\x57\x93\x73\x84\x20\x2c\x51\xb7\x4a\x42\x8d\x97\x0f\xa2\x6d\x03\x27\x16\x7a\x16\x12\xa3\xed\xc7\x20\xcf\xa2\x9d\x23\xbf\x03\xed\x2d\xbc\x06\xf2\xdd\xf7\xc5\x1e\x72\x5d\x18\x8b\xe5\xe2\xef\xea\xdf\xff\xab\xeb\x9b\xdb\xf5\xdd\xf0\xa3\x1b\xfd\x33\x00\x00\xff\xff\x9a\x14\x2b\x2d\xcd\x02\x00\x00"),
		},
		"/powervs/instance": &vfsgen۰DirInfo{
			name:    "instance",
			modTime: time.Date(2020, 8, 30, 6, 34, 3, 952667098, time.UTC),
		},
		"/powervs/instance/README.md": &vfsgen۰FileInfo{
			name:    "README.md",
			modTime: time.Date(2020, 8, 21, 11, 53, 3, 545117379, time.UTC),
			content: []byte("\x54\x68\x69\x73\x20\x77\x69\x6c\x6c\x20\x64\x65\x70\x6c\x6f\x79\x20\x61\x20\x6c\x70\x61\x72\x20\x69\x6e\x20\x61\x20\x50\x6f\x77\x65\x72\x56\x53\x20\x69\x6e\x73\x74\x61\x6e\x63\x65\x20\x76\x69\x61\x20\x70\x72\x69\x76\x61\x74\x65\x20\x6e\x65\x74\x77\x6f\x72\x6b\x0a"),
		},
		"/powervs/instance/main.tf": &vfsgen۰CompressedFileInfo{
			name:             "main.tf",
			modTime:          time.Date(2020, 8, 30, 6, 34, 3, 952604021, time.UTC),
			uncompressedSize: 965,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x52\xcb\x6a\xc3\x30\x10\xbc\xfb\x2b\x16\x93\x43\x5b\xa8\xa0\xd7\x42\xe8\x87\x94\x22\x54\x6b\x49\x44\x22\xc9\x68\x65\xa7\xc6\xf8\xdf\x8b\x15\xcb\x7a\xb4\xa7\xd6\x37\xed\xcc\xae\x67\x76\x56\x0a\x2f\xa0\x55\x9f\x9a\xf7\x8a\x1b\xf4\x37\xeb\x2e\x2d\xb4\xbd\xbd\xa1\x8b\x6f\x6a\x61\x6e\x00\x00\x3a\x3b\x18\x0f\xd5\x77\x84\x2b\x9a\x93\x3f\x3f\x8c\xc2\xb1\xd8\xf1\x18\xf8\x69\x24\x37\x42\x63\xe4\xe7\xc4\xf7\x30\x93\x29\x23\xf1\xeb\x23\x36\x75\x57\x3b\x48\xae\x0c\x79\x61\x3a\xe4\x4a\x6e\x4d\x41\xd5\x48\x9c\xd0\x8d\x6a\x05\x12\xa3\x59\x9a\xa6\xf0\xa2\xb4\x38\xe1\xee\x24\xbc\x76\x1f\x11\xce\x54\x45\x5d\xa9\xfe\x4f\x31\x0e\xc9\x0e\xae\xc3\x24\x68\xc3\x57\x4d\xa3\x4e\xaf\x7c\xb5\x9b\x86\x38\x29\x14\xa3\x0e\x8d\xda\xba\xa9\x5a\xfd\x4a\xbf\x03\x91\xd6\x3b\xdb\x21\x91\x75\x54\xd1\x12\xb0\xef\x20\xfe\xa7\x0e\xa7\x14\x00\xc7\x23\xbc\xc0\x5b\x40\x46\x7d\x27\xbf\x42\x7b\x98\xb3\xc2\xf2\x7c\x98\xb3\x24\x97\x36\x97\xc3\xfd\xd4\x63\xad\x7a\x07\xca\x44\x94\x2c\xfc\xad\x91\xb2\x3c\x51\x96\xe7\xc9\x94\xac\xef\x4c\x49\xfa\xbd\x7b\x23\xb0\xf2\xb2\xd9\x53\x36\xe3\x82\x13\xef\x85\x72\x3f\xf6\x41\x74\x0e\x60\x7e\x16\x34\x51\xe5\x2b\x92\x27\xf2\xa8\x0b\x6b\x7f\x39\xa1\xad\x75\x20\x74\x3c\x1c\x76\xf5\x9b\x1d\x68\x96\xe6\x3b\x00\x00\xff\xff\xdf\x56\x20\xf2\xc5\x03\x00\x00"),
		},
		"/powervs/instance/outputs.tf": &vfsgen۰FileInfo{
			name:    "outputs.tf",
			modTime: time.Date(2020, 8, 21, 11, 53, 3, 546179241, time.UTC),
			content: []byte("\x6f\x75\x74\x70\x75\x74\x20\x22\x61\x64\x64\x72\x65\x73\x73\x65\x73\x22\x20\x7b\x0a\x20\x20\x20\x20\x76\x61\x6c\x75\x65\x20\x3d\x20\x69\x62\x6d\x5f\x70\x69\x5f\x69\x6e\x73\x74\x61\x6e\x63\x65\x2e\x70\x76\x6d\x69\x6e\x73\x74\x61\x6e\x63\x65\x2e\x2a\x2e\x61\x64\x64\x72\x65\x73\x73\x65\x73\x0a\x7d\x0a"),
		},
		"/powervs/instance/variables.tf": &vfsgen۰CompressedFileInfo{
			name:             "variables.tf",
			modTime:          time.Date(2020, 8, 29, 14, 55, 55, 905588326, time.UTC),
			uncompressedSize: 1923,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xcb\x6e\xdb\x48\x10\xbc\xeb\x2b\x0a\x3a\xed\x1e\x64\xaf\x85\xc5\xc2\x5e\xc0\x07\x3f\x80\xc4\x80\x1d\x08\x76\xe2\x2b\x31\x1a\x36\xc5\x81\x39\xd3\xc2\x3c\xe4\x28\x81\xff\x3d\x68\x92\xb2\x25\x82\x63\x27\x27\x8d\xc0\xea\xaa\xea\xe7\x64\xa3\xbc\x51\xcb\x86\x30\x35\x4b\xab\x1b\x4e\x65\xa1\xd6\xa6\x78\xa2\xed\x14\x3f\x27\x00\x50\x52\xd0\xde\xac\xa3\x61\x87\x73\x4c\xaf\xc9\x71\xa4\x80\x58\x13\x6e\x2e\xef\x70\x25\x31\xb8\x58\xdc\xe0\x89\xb6\x88\x8c\x14\x68\x3a\x79\x99\x8c\x31\x7b\x5a\x19\x76\x1f\x10\x3f\xd7\x46\xd7\x7b\xd4\x5d\x90\x30\x6b\x76\x8e\x74\x44\xe4\x9c\xc0\x0f\x76\xf4\x87\xf4\x12\x72\x48\x8e\x19\x8e\xcc\x11\xfd\x0f\x4a\xb3\x92\x66\x27\xfd\xef\x1c\x48\x61\x16\x38\xc5\x1a\x14\xf5\xd1\xc0\xc3\xc6\x16\x4e\xd9\x9c\xfa\x17\x65\x09\x5c\xb5\x55\x7b\xbc\x1b\x84\xae\xf9\x99\xfc\x26\x14\x81\xfc\xc6\x68\x2a\x8c\x0b\x51\x39\x79\x94\x19\xba\x85\x44\xe0\xd1\xf8\x98\x54\x83\x07\xf2\x1b\xf2\xe8\xc3\xb1\x0b\xc7\xcd\xf5\x40\xc8\x92\x65\x9f\x6b\xec\x85\xe5\xe4\xa2\x98\xec\x60\xf8\xeb\xd3\xe5\xdf\x52\x8e\x25\x41\x35\x0d\x6b\x15\xa9\x94\xff\xe3\x39\x78\xd6\x14\x02\xfb\x90\xab\x40\xb2\x4b\xf2\x42\xbf\xe9\x6d\xbf\x85\x08\xeb\x4e\xe2\x5d\x85\x22\x6e\xd7\xb9\x12\x2f\x76\x74\x10\x10\x2a\x79\xd4\x84\xdb\xc5\xc5\x3d\x66\x08\xb5\xf2\x54\x1e\x97\x54\x9a\x36\x91\x69\x4f\x51\xa9\xd4\x44\x79\x0a\x45\x07\x1a\xe8\x86\x50\xcb\x3a\xbc\xd7\xdd\x87\x87\xcf\xed\xf4\x0b\x04\xc6\xed\x4d\x57\x57\xbe\x14\xa8\x6c\x0d\x09\xb0\xe1\x95\x71\x61\x28\x22\xca\xf2\xcc\x29\xd4\x9c\x9a\xb2\x4d\xa8\x54\x51\x61\xc3\x4d\xb2\x24\xdc\x9d\x67\xb0\x87\xe3\x88\x19\xa2\x4f\x74\x5c\xa9\x46\xb6\x70\x24\xc5\xfe\xcb\x81\xb8\xa3\xf8\xcc\xfe\x29\xd7\xb9\x5b\x13\xda\xb1\xd8\xc1\x10\x6b\x15\x11\x3a\x47\x32\x1c\x31\x2a\x5d\xef\xcf\x06\x66\xb8\xf2\xd4\x36\xb3\x36\x61\x17\x88\x25\x55\xec\x09\x3e\x39\x67\xdc\x0a\x91\xbc\x57\x15\x7b\x3b\xac\xc5\x36\x44\xb2\xef\xb5\xfa\xab\x34\x98\x2b\x74\x48\xb0\xeb\xb7\xba\x57\x7f\xb3\xa6\x5b\x17\xa5\xf4\xff\x6c\x3e\x3f\xa6\xd3\xd3\x7f\xc6\x1b\x7f\x36\x9f\x0f\x6f\x8a\x55\x2b\xfa\xdd\x95\x6e\xc1\xa8\x3c\xdb\x9c\x93\x92\xd6\x0d\x6f\x5b\x2b\x32\x1d\xa6\x0f\x69\xf9\x0f\x85\x3d\xad\x1b\x99\x51\xc3\xae\x58\x73\x63\x74\x6e\x61\xef\xdf\x80\xe8\x80\xfb\x17\x66\x24\x4b\x27\xd7\x31\x2f\x16\x74\x4d\xd9\x6c\xf7\xc5\x3a\xe0\xeb\x86\x65\xd4\x42\xaa\x2a\xf3\x7d\x5c\xcf\xc5\x8f\xcf\xc4\xe3\xdd\xeb\x25\x6b\x0f\x44\x57\xc1\x51\xa9\x93\x81\x4a\x0a\xe4\x0b\xd9\x93\x8c\xc8\xb7\x40\xbe\xdb\x23\xe3\xb0\x54\x81\xfe\xfb\x17\xe4\x34\x97\xdd\x9a\x5a\x15\x0f\x65\xce\x31\x1d\x4e\xc7\xee\x44\x6b\x39\x9a\x1f\xe6\xf2\x9a\xc8\x90\xf7\x64\xf2\xf2\x2b\x00\x00\xff\xff\xbc\x71\x46\xad\x83\x07\x00\x00"),
		},
		"/powervs/main.tf": &vfsgen۰CompressedFileInfo{
			name:             "main.tf",
			modTime:          time.Date(2020, 8, 31, 5, 9, 5, 705321057, time.UTC),
			uncompressedSize: 5622,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5b\x6f\xdb\xb6\x17\x7f\xf7\xa7\x38\x20\x0a\xb4\x29\x4c\xca\xe9\xbf\xff\xae\x0d\x20\xec\x52\xac\xdb\x50\x60\x7d\x18\xfa\xe4\x18\x02\x4d\x1e\x3b\xac\x25\x52\x20\x29\x27\x69\xe0\xef\x3e\x90\x94\x6d\x49\xb1\x73\x29\xfa\xb0\x75\x6d\x5e\xea\x73\x78\x6e\xbf\x73\xb5\x25\xf7\x1c\x88\x9a\x57\x85\x45\x67\x1a\x2b\xb0\x58\x5a\xd3\xd4\x04\x88\x5d\x12\xb8\x19\x01\x68\x5e\x21\xe4\xb0\xe6\x96\xd5\xe6\x12\xed\xda\x0d\xde\x8e\x36\xa3\xd1\x01\x3d\x4a\x3b\xcf\xb5\x40\x02\xc4\xa3\xf3\xb4\x96\xda\xd1\x3d\xf1\x88\x6a\xa9\xdd\x08\xa0\x6f\xa0\x50\x12\x72\x08\x26\xd8\x6d\x4f\x99\x5d\x32\x25\xfb\x3e\x48\xed\x8a\xcf\x46\xa3\x23\x40\xa4\x2b\x82\xe5\xf0\x31\x19\xdd\xba\x70\x4c\xeb\x96\xcf\x6e\x7b\xcd\x96\xcd\xd0\x54\xad\x0a\x8d\xfe\xd2\xd8\x15\x01\x82\x57\xca\x79\xa5\x97\x81\x94\x8c\x09\xd3\x68\x0f\x83\x7f\xfd\x88\x5b\xf1\x22\x81\x91\x03\x21\xf0\x23\x4c\xe0\x0c\x4e\x47\x00\x7b\xf5\x89\x7f\x8f\x7c\x92\x10\xa5\x69\x64\xd1\x8f\xb3\x2b\xe1\xd0\xae\x55\x64\x84\x58\xb6\x81\x1f\x88\xa7\x6e\xe6\xa5\x12\x7b\xc2\xd1\x88\x1e\x16\xd4\x29\x9c\xc1\xe4\x58\x50\xad\x12\xf2\xe4\x26\xe8\x11\x65\xe3\x3c\xda\xc8\xdf\xd0\xba\x99\xd3\x00\xe9\xb1\xf0\x0e\x38\xd0\x89\xb1\x67\xd0\x5f\xd7\x03\x83\x41\xf9\xba\xe4\xba\xd5\x2e\xb5\x83\x1c\xa6\x40\xde\xb0\xf8\x47\xc6\x40\x5e\xb3\xf8\x47\x66\x01\xaf\xca\xc8\xa6\x44\x20\x15\x0f\x1e\x26\x50\x5a\x04\x73\x20\x2c\xdb\x95\xf8\x28\x14\xdb\xbc\x4a\xee\xf2\x5a\x15\x2b\xbc\x1e\x78\xd9\x52\xc3\xc3\x8a\x2f\xb1\x38\xd0\x10\x7b\xc6\x08\xa0\xc2\xca\xd8\xa1\x92\x44\x0c\xed\x94\x62\x8c\xfe\xdf\x9b\x8c\x7e\xb2\x59\x3f\xd5\xd3\xc9\x8c\x0d\xb3\x74\xb6\xef\x95\x8e\x5c\xb7\xe4\x0f\x48\xcd\x02\xa8\xc3\x94\x3c\xa4\x30\x01\x6a\x6b\x04\x3a\x67\xac\x1b\xbc\xda\x33\x02\xf2\xee\x22\x20\x78\x08\xb9\x96\x35\x02\x58\x57\x5b\xfe\xc1\xf2\x6a\x33\x39\x02\x68\x1c\xda\x22\x36\x77\x0e\x73\xee\xf0\xd5\x4b\xd4\xc2\x48\x7c\xe6\xb1\xaa\x4b\xee\x71\xa1\x4a\x7c\x46\x9e\xdc\xd4\xdc\x5f\xb0\x54\x09\x9b\x6c\x27\xc5\x7c\x55\x97\x64\x7c\x53\x1b\xeb\xf3\x60\x87\xd7\x2a\xc4\x84\xb6\x08\xa4\x31\xe0\x95\xb7\xbc\x90\xa6\xe2\x4a\xe7\x77\xf8\xc2\x12\xab\x33\x14\xe3\x3c\xdb\x90\x31\x58\x2c\x91\x3b\x2c\x2a\x6e\x57\x68\xa3\x95\x3e\x69\x0c\xf3\x46\x95\xb2\x58\xa3\x75\xca\xe8\xf8\xa2\x47\xd9\x9c\x9c\x74\x2b\xd3\xe2\x52\x19\x7d\x6b\xc2\x07\x62\xf7\x59\xb0\x3f\x78\x14\x48\xdd\x8e\x08\x59\x47\xeb\xee\x6a\x89\xce\xf8\x4d\x83\x24\x69\x6c\x25\x13\xed\x7b\xdf\xfc\x4b\xfa\x26\x65\xed\x7b\xdf\x7c\x69\xdf\xf4\x37\x6f\x70\x76\x77\x84\x58\x14\xc6\xca\xde\xe9\xb4\xe5\xd1\xc4\xa3\xfc\x2b\x9d\x33\x00\xc1\x9f\xed\x1a\xcd\xa1\x34\x82\x97\x2c\xd0\x94\x74\xd3\x43\x70\x86\xe2\xec\xee\xd1\x1c\xc8\xcf\x64\x7b\xce\xdd\xbd\xc9\xf7\xa3\xd6\xc6\x72\xd9\x3e\x4e\x25\xc1\xda\x2c\x72\x29\x2d\x3a\x87\x6e\x3a\x99\x85\xe6\xc0\x2b\x8f\x56\xf3\xb2\x50\x75\x30\xed\xcb\xce\xfe\xfe\xdf\xab\xc9\xa4\x0f\xa6\x6e\xca\x72\x17\x3f\x01\x72\xc9\x95\xa7\x0b\x63\x5b\xe3\x54\x98\xaa\x2e\xd1\xa3\xdb\x1e\x34\x5a\xa3\xf0\x21\x97\xe1\x63\x1b\x5a\x0e\xc4\xb9\x0b\x12\x09\xa1\x4e\x03\xc1\x1a\xe3\x13\xe5\xc2\x38\xff\x48\xaf\x43\x63\xaa\x35\xf7\xd8\x8e\xb3\xd8\x11\x01\xa0\xd0\x6e\x1d\xd6\x49\xf2\x41\x55\x68\x9a\x60\x83\x9c\xfe\xbf\x0a\x46\x37\xa9\xb5\xd7\x2a\x94\x22\x5a\x20\x16\x2b\xe3\x91\xe2\x15\x0a\xd2\x7a\xae\x74\xa9\x62\xb5\x4d\x47\x09\x1e\x12\x6b\x90\x2a\xad\x3c\x38\xcf\x7d\xe3\x80\x5e\xa6\x10\x66\x51\xe7\x9d\xc0\xad\x9a\x39\x72\x59\x45\xf1\x64\x42\x62\x8d\x5a\xba\x22\xd6\xfd\xb4\xf7\x9e\x1d\x85\x79\xf6\xad\x83\xdc\xe2\x04\x11\x66\x4a\x77\xc3\x8b\xce\x95\x96\x34\x0e\xb5\xd4\x0b\xfd\xb1\xb6\xe9\xbd\x15\x68\x3d\x8d\x73\x8e\x3a\xae\x1d\x3c\x7e\xc8\x01\xa5\xb5\x91\xb4\x5d\x23\x54\x28\x69\xf3\xd3\x1f\x5e\xb0\x17\x13\x36\x61\x93\xec\xf4\x15\x50\x1a\x5c\xb5\x3a\x64\x85\xb6\x53\xad\x35\xd4\x9f\x85\x41\x97\x37\x2b\xdc\x72\xe7\xc6\x78\xe7\x2d\xaf\x8b\x48\xdd\x90\xf1\xae\xc0\x1a\x5b\xc2\x85\xf7\xb5\x3b\xcb\x32\x69\x84\x63\xb5\x35\x9f\x50\x78\xc1\x4b\x25\x0c\x33\x76\x99\x55\x5c\xab\x05\x3a\xef\xb2\x96\x78\xcd\xab\x12\xe8\x87\xbd\x16\x87\x12\xa8\x82\xa7\x2e\x5b\xa3\xbf\x28\x2a\xdf\x9c\x9f\x9f\xb1\xe7\xbb\x4f\x67\x70\x4e\x5e\xbf\x79\x39\x39\x27\xd9\x53\xe8\x28\xd9\x6b\x78\xff\xf1\x97\x5f\xdf\x7e\xf8\xf3\xdd\x1f\xbf\xe5\x19\x7a\x91\xed\x03\xcd\xb8\xac\x94\x66\xc2\xe8\x05\x04\xaa\xf0\x25\x08\x8b\xdc\x23\xd0\x45\x4f\x59\xa7\x2f\x06\x65\x10\x67\x62\xaf\x0a\x84\xa9\x2a\xae\x65\x2c\x61\x51\x03\x35\xf0\x97\xb7\x4a\xf8\xdf\x8d\xf3\xef\xf1\xfa\xed\x05\x8a\x95\xd2\xcb\x5c\x9b\xc0\xfb\xe8\xd0\xbe\xd7\xe6\x52\x07\xb6\x7b\xa7\x4a\xcc\x33\x89\xeb\x2c\x74\x50\x08\x3c\xa1\x3c\x28\xd2\x0d\x84\x5e\xf8\xe9\xc9\xcd\x83\x3b\x60\x73\x76\x47\xec\xc9\x46\x44\xc0\xe8\x85\x5a\x16\x61\x17\x6f\xc8\xfd\x63\xa0\xed\xe7\x46\x7b\xae\xf4\x03\x06\x41\x77\x6c\xcc\x76\xdf\x18\x0f\x1c\x7a\xe1\xa6\x9a\x74\xbe\x17\x7e\xd3\x43\xe2\x71\x05\x1a\xa1\x06\x6d\x24\xba\x30\x25\xca\x32\xfe\x9f\x5a\x53\x26\x7c\x93\x24\x53\x26\x6b\xb3\x33\x18\xea\x0f\xda\x87\x6d\x32\x6e\x2f\xc4\x63\x87\xf9\xd7\x48\x51\xab\xb1\x93\xa3\xa8\x9b\x29\x2d\xf1\xea\x1f\x93\xad\xaf\xb2\x37\x3f\x19\xa5\xb7\x47\xf2\xc3\xd7\xe7\xad\xac\x8c\xe1\x0b\xfb\xeb\x3f\x94\xaf\xed\x0a\x0e\x90\xc3\x7d\x13\x33\x0c\xca\x63\x0b\xf9\xae\xad\x07\x94\x4a\xe5\x84\x59\xa3\xbd\x4e\x0f\x69\xa3\x1d\x5f\x20\x75\x2b\x55\x53\xc1\xc3\x4e\x55\x0b\x25\x78\x00\x7c\xd8\x91\x71\x87\xb8\x18\x41\x7b\x5c\x43\x0e\x9f\x55\x5d\xf1\xfa\xd9\xee\x6c\xdf\xfd\x72\xc9\x3a\xbf\x5b\xb2\x1d\x75\xfa\x7c\x36\x25\xe1\x16\x20\xb3\x31\x3c\x4a\xa8\xbd\xf1\xc9\xec\x64\xb4\x19\xfd\x1d\x00\x00\xff\xff\x7c\xad\x94\xea\xf6\x15\x00\x00"),
		},
		"/powervs/output.tf": &vfsgen۰FileInfo{
			name:    "output.tf",
			modTime: time.Date(2020, 8, 21, 11, 53, 3, 547460756, time.UTC),
			content: []byte(""),
		},
		"/powervs/provider.tf": &vfsgen۰CompressedFileInfo{
			name:             "provider.tf",
			modTime:          time.Date(2020, 8, 30, 11, 13, 55, 164818348, time.UTC),
			uncompressedSize: 139,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcb\x41\x0a\x02\x31\x0c\x46\xe1\x7d\x4e\xf1\x93\x03\x14\x5d\xba\x18\xaf\x32\xcc\xd8\x20\x41\xdb\x94\x14\x23\x2a\x7a\x76\x91\x22\x88\xdb\xef\xf1\x9a\x5b\x68\x16\x07\xeb\x5a\x18\x0f\x02\x42\xbc\xab\x55\x4c\xe0\xd7\x1e\xdb\xb4\x4b\x1b\x26\x40\xd7\x72\x38\xdb\x25\xcf\x4b\xd3\xf9\x24\x37\x4c\x88\xc5\x53\xb3\xab\x78\xf4\xaf\x12\xe0\x72\x1c\xfb\x6f\x1e\x48\xc0\xdd\xaa\xfc\xb5\x0f\xd1\x93\xde\x01\x00\x00\xff\xff\x09\xb3\x74\xfd\x8b\x00\x00\x00"),
		},
		"/powervs/user_data.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "user_data.tmpl",
			modTime:          time.Date(2020, 8, 21, 11, 53, 3, 548895817, time.UTC),
			uncompressedSize: 3558,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x6b\x6f\xdb\xbc\x15\xfe\x9e\x5f\x71\xa6\x04\xe8\xd6\x8e\xa4\x9d\x4b\x93\x1a\xf0\x00\x37\x71\xba\x20\x69\x12\x38\xce\x5a\xac\x28\x0c\x9a\x3a\x96\x59\x53\xa4\x46\x52\x76\xb2\xcc\xff\x7d\xa0\x2c\xc9\x76\xa2\xb4\x03\xd6\xb7\x5f\x54\xf3\x39\x97\xe7\x5c\xc9\xec\x0a\x65\xf2\x98\x08\xa3\x27\x32\xd9\xd9\x85\xe1\x54\x3a\x90\x0e\x38\x6c\x02\x30\x91\x0a\x61\x62\x2c\x8c\xad\xd4\x89\xd4\x09\xf8\x29\xc2\xec\xc4\x41\xca\x9d\x47\x0b\xda\xc4\x08\x79\x06\x5c\xc7\x60\x73\xad\xa5\x4e\x76\x76\x16\x56\x7a\x1c\x05\x5d\xd7\xd9\x01\x20\x20\x8c\xf6\xa8\x7d\x07\xfe\xb3\x03\xc5\xbf\xa7\xf2\x0b\x10\xe1\x03\x0a\x62\x32\xef\xa2\x0e\x7c\x8b\x34\xf7\x72\x8e\x54\x24\xd6\xe4\x59\x6c\xe5\x1c\x6d\xd7\x3d\x3a\x8f\x69\x1c\x7d\xff\xeb\x5a\x4b\x99\x84\xac\xe0\xa8\x03\xd1\x0f\x67\x34\x09\xfe\xa2\x67\x22\xa5\xdd\xb5\x3b\x80\x28\xe5\x0f\xc4\xc9\x7f\x63\x50\x6c\xb7\x5a\x69\x54\x83\xcb\x0d\x6d\xe7\x8d\xe5\x09\x6e\x38\x31\x73\xb4\x8a\x3f\xee\x47\x0d\x52\x15\xff\x4d\x3f\x95\x3c\x0d\xff\xb1\x32\xc6\xd1\x0c\xad\x46\x35\x12\x53\x14\xb3\xae\xb7\x39\xae\x5d\x6f\xc6\x96\xfa\x3c\xea\xc0\x87\x56\xab\x55\x9e\x2d\x8b\x6f\xc6\xfd\xb4\x03\x0c\xbd\x60\xb1\x11\x33\xb4\x2c\xe6\x98\x1a\x4d\x43\xf4\xcd\x69\xfe\x76\xaf\xa5\xff\x5e\xfe\x38\x43\x27\xac\xcc\xbc\x34\xba\x3b\xcb\xc7\xa8\xd0\x77\x60\x38\x45\xb8\xcc\xc7\x81\x98\x47\x07\xd7\xa1\x9c\xbd\x04\xb5\xaf\x94\x8c\xc8\x53\xd4\x9e\x17\x6a\x53\xef\x33\xd7\x61\x6c\x56\x6b\x50\x69\x02\x1b\xc7\x4a\xf9\x2f\x5c\x7b\xd7\xd5\xe8\x17\xc6\xce\x88\xd1\x4a\x6a\xa4\x9e\xdb\x04\x2b\x8b\xbd\x89\x47\xfb\x8a\x44\x45\xfb\x0e\xed\x5c\x0a\xac\x98\xf7\xf5\x5c\x5a\xa3\x03\x8f\x6e\x74\x79\xff\xb1\x7f\xd5\x1f\x8e\x4e\x6f\xae\xcf\x2f\x3e\x8d\x7a\x83\x4f\x77\x5d\x52\xf6\x6b\x97\xcd\xb9\x65\x4a\x8e\x59\x19\x20\x5b\x9d\xd3\x47\x9e\xaa\xe8\x67\xd6\xc2\x77\xdb\xe2\xd8\x18\xef\xbc\xe5\x19\x09\xb6\x2a\xfb\x21\xfb\xeb\xe8\xd9\xb6\x90\x42\x4f\x83\x20\x90\x9f\xe9\x6c\x4a\xfe\x92\x53\xef\xec\x73\x1d\x62\x31\x13\x64\x7b\x28\x80\x90\x2a\x95\x99\xca\x13\xa9\xbb\x42\x4b\x20\x24\x33\x31\x91\x7a\x62\x79\xc8\x8c\xe7\x52\xa3\x25\x32\xe5\x09\x76\x67\x27\x8e\x26\xc2\x86\xc2\x65\x3c\x77\xd8\x39\xa0\xfb\x35\x8d\x07\x14\x77\x9e\x5b\xdf\x65\xb9\xb3\x4c\x19\xc1\x15\x1b\x4b\x5d\x71\x86\xbd\x57\xf2\xb5\x06\x1a\x0f\x37\x23\x59\x9f\xf6\xbf\x0e\x07\xbd\xe2\xac\x74\x3f\x40\x57\x38\xe7\x6a\xc1\x1f\x5d\x79\x58\xf0\xb9\x92\xa9\xf4\x17\xda\xa3\x9d\x73\xd5\x6d\x6d\xcb\xdf\xa1\xe8\xb6\x5b\x75\xf3\x5c\x68\xe7\xb9\x52\xdf\x37\x3a\x12\xe3\x8f\x8f\xdd\x34\x57\x5e\x92\xdc\xa1\xdd\x6c\xc8\x72\xaa\x8a\x70\xe5\x98\x95\x69\x2d\xbf\x75\xad\xdc\xaa\x21\x9b\xa7\x6c\xf7\x4f\x85\x7a\xc8\x13\xea\x39\x8c\xb9\x9b\x56\x08\x54\x13\x53\x2e\x0a\x9a\x18\x93\x28\xe4\x99\x74\x54\x98\x74\xa3\x2d\x88\x45\x85\xdc\x21\x89\x71\xce\x84\x64\x8a\x7b\x74\x9e\xfa\x07\xbf\xda\xbf\xb9\x54\x31\xe8\x3c\x1d\xa3\xad\x32\x73\x7a\x31\xfa\x47\x7f\x70\x77\x71\x73\xdd\xdd\xdb\x7b\x5a\xff\xea\x90\x68\xde\xa6\xfb\x2d\xda\x22\x5c\x65\x53\x4e\x5b\xf4\xa8\x7d\xf4\xee\xe0\x64\xbf\xdd\x3a\xc6\xf7\xe2\xe4\xf0\xe0\xf8\x30\x5a\x56\xf3\x38\x38\xfd\x7b\xd0\x0f\xdf\x0e\x89\xb2\x4c\xbc\x3f\x54\x58\xc3\x83\xfe\x55\xbf\x77\xd7\x1f\x7d\xee\x0d\x2e\xfb\x83\x20\xb8\x7d\xd2\x21\x51\xcd\x36\x5a\x56\x45\x78\xcc\x53\x90\xab\x3a\x00\x79\x0c\x29\xd3\xde\x72\x31\x23\xde\x18\xe5\xc0\x19\xc1\x3d\x78\x01\x32\xf3\x7c\xac\xd0\xc1\x62\x63\xfc\x51\x4c\x0d\x44\x67\x66\xa1\x95\xe1\x71\xb8\x74\x8a\x69\xf2\x8a\x52\x5a\x75\xaa\xc8\xad\x02\xe2\xee\xae\xea\x0c\xc7\x8a\x86\xd6\x96\x26\x64\x6f\x2b\x1f\xcb\xa2\x34\x4a\xea\xfc\x81\x95\x81\x2e\x59\x69\x12\xfe\x06\x0d\xad\x2e\xbc\xfa\x29\x97\xd0\x12\xbf\x99\x4b\x98\xae\x46\x2e\xaa\xde\x9c\xcd\x5c\x78\x9c\xfe\x6e\x2e\x3c\x4e\x9b\xb9\xf0\x38\xad\x8a\x24\xa6\xa9\x89\xe1\xdd\x43\x93\xd8\xdb\xea\xf2\xb8\x39\xbd\xec\x0f\x46\xc3\xfe\xe7\xdb\xee\xde\x9f\xd3\x99\xc7\x34\x03\x12\xff\xa5\x84\x43\xcd\x6b\x9a\x26\x53\x7c\xfc\x81\x66\xdc\xfe\xcb\xa3\xa0\xb9\x96\x82\xa7\x19\x1d\x5b\x96\xe5\x63\x56\x74\x25\xaa\xea\xe2\x9b\xa3\x75\xd2\x68\xd2\xfe\x40\x5b\x07\xf4\x84\x09\xd4\xde\xb8\x12\x25\x02\x2b\x80\x1c\x50\x54\xc7\xb4\xec\x69\x6a\xb3\x14\xc8\x2d\xec\xed\x3d\x6d\x30\x5b\xfe\xf1\x6c\x84\x92\xff\x37\xa3\x58\xd1\x09\xc6\xc6\xf2\xcc\x9a\x1f\x28\x3c\x35\x36\x29\xc8\x60\x86\x8a\x1d\xb3\xd2\x22\xbb\xe5\x62\xc6\x13\x74\x4c\xb0\x7a\xf3\xc7\xa4\x4d\xf7\xe9\x21\x69\xff\x2f\xbe\x9b\x27\xf8\x99\x14\x7b\x1b\xd4\x37\x44\x2d\xa6\x66\x8e\x41\x32\x33\x71\xca\x75\x09\xad\xd6\x68\x98\x33\xd4\x61\xd0\x61\x95\x94\x17\x68\xb1\xc7\x2b\xb0\x44\xeb\xdd\x40\x6e\xe1\xe2\xfa\xf6\x7e\x08\xbd\xd3\xd3\xfe\xed\xb0\x01\x3e\xbf\x19\x7c\xe9\x0d\xce\x5e\x17\xb8\xb9\x1f\x6e\x18\xa8\xb7\xf3\xb9\xca\xdd\x14\x7a\x4a\xc1\x45\x25\x7c\x3a\xe5\x52\x3b\x76\x2e\x2d\x2e\x42\xec\x36\x0f\xa7\xbb\x2f\x6c\x9e\xaf\xad\x9c\x85\x19\x45\xe0\x2f\xcd\x34\xe8\x7d\x7d\xee\x3d\xa8\x09\x93\x87\xbb\xcd\x81\x37\xa6\x41\xe7\x9f\xcf\x55\x74\x0c\xf1\xda\xa9\xe6\xbe\x38\x82\x94\xeb\x44\x61\x83\x01\x5f\xc8\x90\xf3\xd7\x80\xaf\x0d\x40\x69\xac\x51\xa9\xc2\x9a\xf4\x2c\x5f\x34\x2b\x15\x40\x1d\xfe\xba\xf6\x16\xb7\xaa\x5f\xc2\x0b\x9e\x99\xc9\x04\x08\x7f\xa9\xb0\x7a\xf6\x86\x0b\xd3\xf0\xf8\xb5\x46\xdb\x5e\x9d\xcf\x3b\x6d\x1b\xad\x76\x9e\x45\x87\x1e\xc8\xa4\x3c\xb6\x29\x10\x3b\x59\xbd\xb8\x85\x96\x4c\xa3\xa7\xf1\x8b\x47\x43\xbd\xf9\x36\xde\x82\x27\x8e\x96\x6f\x80\x0c\x6d\x2a\x5d\x58\x0f\xae\x03\x6f\x5a\xc7\x47\x47\x6f\x76\x76\x6c\xae\x45\x1a\xaf\xfe\x34\x7a\x7e\xbf\x3e\x95\xef\x80\x51\xca\xed\x0c\xed\x72\xeb\x96\x7f\x2a\x9e\x01\xa3\x72\xe1\x2c\x7f\xc9\xe0\xbf\x01\x00\x00\xff\xff\xd0\x51\xb6\x6e\xe6\x0d\x00\x00"),
		},
		"/powervs/variables-powervs.tf": &vfsgen۰CompressedFileInfo{
			name:             "variables-powervs.tf",
			modTime:          time.Date(2020, 8, 21, 11, 53, 3, 550131562, time.UTC),
			uncompressedSize: 1052,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\xc1\x6e\xe2\x30\x10\x86\xef\x79\x8a\x11\x0f\xb0\xe7\xbd\xec\x61\x01\x89\x45\x68\x51\x44\x24\x0e\xbd\x44\x26\xf9\x01\x2b\x89\xc7\x1a\x3b\x41\x69\xd5\x77\xaf\x1c\x48\x2b\xb5\x31\xa8\xbd\x7f\xff\x37\x9e\x5f\xe3\x4e\x89\x56\x87\x1a\x34\xb3\x7c\x81\x74\x2e\x17\x38\x6e\xa5\x40\x7e\x12\x6e\xed\x8c\x5e\x12\xa2\x12\xae\x10\x6d\xbd\x66\x43\x7f\x68\xb6\x9e\xff\xa7\x45\xcd\x6d\x49\xbb\x1b\x4c\xab\x01\x4e\x5e\x93\xe4\xab\x51\x59\x9d\x57\xe8\x27\x55\x4b\x18\xf6\x70\xe4\xcf\xa0\x0f\xed\xdf\x74\x4d\x15\x7a\xf2\x4c\xad\x43\x44\x5b\x1a\xf7\xe0\x75\xfb\x74\x41\xa9\xe8\x4e\x79\xd0\x72\x9b\x91\x51\xcd\x1d\x59\xfe\xcc\x06\xdf\x34\x3e\xb1\x01\x6d\x07\x6d\x48\x1d\x55\x5b\xfb\x90\xa8\x7e\xbb\x5f\x1e\xce\x47\xa6\xe9\x46\x9d\x90\x0f\xcf\x99\x9a\x97\x06\x6c\x9f\xd1\x80\x0d\xaf\x0e\x4d\x1c\x10\xca\x28\xe9\xc8\x32\xd4\x55\xc2\xd6\xdc\x37\x30\xb1\x29\x0d\x1a\x96\xe9\xda\xc7\x09\x57\x84\xb4\xa1\xd5\x3c\x62\xb1\xc2\x05\x9c\x63\x99\x6e\x7b\x34\xbd\x63\xd4\x1a\xed\x5d\x44\x66\xe0\x2f\x2c\xd5\xe3\xd5\xb7\x57\xf0\xe7\xcb\x3b\x48\xa7\x0b\xe4\xba\xbc\x3b\xe7\x86\xd1\x7a\x19\xf3\xb8\x73\xf4\x78\x47\x49\x96\xfd\xa3\x0d\xfa\xb8\x44\x70\xd2\x6c\xee\x3a\x76\x57\x64\x3a\x1f\xbd\xcc\x31\x1d\xee\xf0\x53\x56\x59\x1d\x96\x83\xe4\x96\xc5\x4f\xa6\x37\xed\x01\x62\x10\xfe\x5f\xf8\x71\xd9\x80\x53\x1a\xf0\xe0\x7a\x0b\x00\x00\xff\xff\xed\x6c\x7e\xc3\x1c\x04\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/config.tf"].(os.FileInfo),
		fs["/powervs"].(os.FileInfo),
	}
	fs["/powervs"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/powervs/config.tf"].(os.FileInfo),
		fs["/powervs/instance"].(os.FileInfo),
		fs["/powervs/main.tf"].(os.FileInfo),
		fs["/powervs/output.tf"].(os.FileInfo),
		fs["/powervs/provider.tf"].(os.FileInfo),
		fs["/powervs/user_data.tmpl"].(os.FileInfo),
		fs["/powervs/variables-powervs.tf"].(os.FileInfo),
	}
	fs["/powervs/instance"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/powervs/instance/README.md"].(os.FileInfo),
		fs["/powervs/instance/main.tf"].(os.FileInfo),
		fs["/powervs/instance/outputs.tf"].(os.FileInfo),
		fs["/powervs/instance/variables.tf"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
